# Data Cleaning and Preprocessing

## Introduction and Motivation
This document outlines the steps taken to clean and preprocess the data from a dataset containing view/like/comment counts, relevant comments and populariy value from Spotify and YouTube. The primary goal is to prepare the data for sentiment analysis and further statistical modeling, focusing on extracting meaningful insights about song popularity and engagement.

## Overview of Methods
The methods used include text cleaning, language detection, sentiment analysis, data transformation, and normalization. These techniques ensure that the data is in an appropriate format for analysis, removing any inconsistencies and ensuring quality and accuracy in the results.

## Code Implementation and Description

### Data Reading
The raw data is loaded from a CSV file using Pandas, which provides a convenient framework for data manipulation in Python.

```{python}
import pandas as pd
df = pd.read_csv('../../data/raw-data/spotify_youtube.csv', encoding='iso-8859-1')
df.head()
```

### Comment Cleaning and Language Filtering
Comments are cleaned by removing HTML tags, punctuation, numbers, and ensuring they are in English. This is crucial for the accuracy of the sentiment analysis.

```python
def clean_comments(comments):
    # Cleaning code here...
    return english_comments
```

### Sentiment Analysis
Using NLTK's VADER, we perform sentiment analysis on the cleaned English comments. This provides a mean sentiment score for each record, indicating the overall sentiment of the comments associated with each song.

```python
def average_sentiment_score(comments):
    # Sentiment analysis code here...
    return score
```

### Data Transformations
Several transformations are applied to the dataset:
- Converting video duration from ISO 8601 format to seconds.
- Binary encoding of video definition (HD or SD).
- Factorizing the 'genre' column to prepare for modeling.

```python
df['Duration_seconds'] = df['Duration'].apply(duration_to_seconds)
df['Definition'] = df['Definition'].apply(convert_definition)
df['genre_label'] = pd.factorize(df['genre'])[0]
```

For future analysis, some categorical variables are converted into numerical style.

### Data Normalization
Using `StandardScaler`, numerical columns are scaled to have zero mean and unit variance. This step is important for models that are sensitive to the magnitude of input features.

```python
scaler = StandardScaler()
df[columns_to_scale] = scaler.fit_transform(df[columns_to_scale])
```

### Before-and-After Visualizations
```{python}
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

# Load the normalized data
df_normalized = pd.read_csv('../../data/processed-data/Normalized_Data_with_Sentiments.csv')

def plot_data_comparisons(df_original, df_normalized, column_name):
    fig, axes = plt.subplots(1, 2, figsize=(12, 5))
    
    # Original Data Histogram
    sns.histplot(df_original[column_name], ax=axes[0], kde=True, color='skyblue')
    axes[0].set_title(f'Original {column_name}')
    
    # Normalized Data Histogram
    sns.histplot(df_normalized[column_name], ax=axes[1], kde=True, color='olive')
    axes[1].set_title(f'Normalized {column_name}')
    
    plt.tight_layout()
    plt.show()

# Assuming the original data is still available and named df
df_original = pd.read_csv('../../data/raw-data/spotify_youtube.csv', encoding='iso-8859-1')

# Example variables to visualize
variables_to_visualize = ['View Count', 'Like Count', 'Subscriber Count']

for variable in variables_to_visualize:
    plot_data_comparisons(df_original, df_normalized, variable)
```

The standardization has transformed the data into a scale where it is centered around zero, greatly reducing the range of values and making the distribution more compact. The normalization process highlights the underlying data structure more clearly by smoothing out extreme variations and focusing on the distribution's shape, facilitating more effective data analysis and model training.

### Data Storage
The processed data is saved back to a CSV file, ensuring that all modifications are preserved for subsequent analysis.
```python
df.to_csv('../../data/processed-data/Normalized_Data_with_Sentiments.csv', index=False)
```

```{python}
df = pd.read_csv('../../data/processed-data/Normalized_Data_with_Sentiments.csv')
df.head()
```

**Review Data Types**

| Variable Name       | Data Type          | Description                                           |
|---------------------|--------------------|-------------------------------------------------------------------|
| singer              | Categorical        | Artist or band name                                   |
| genre               | Categorical        | Genre of the music                                    |
| Video ID            | Categorical        | Unique identifier for the video                       |
| Title               | Categorical        | Title of the video                                    |
| Description         | Categorical        | Description of the video                              |
| Published At        | Date-time          | Date and time the video was published                 |
| Days Since Published| Numerical          | Number of days since the video was published          |
| View Count          | Numerical          | Total number of views on the video                    |
| Like Count          | Numerical          | Number of likes on the video                          |
| Comment Count       | Numerical          | Number of comments on the video                       |
| Comments            | Categorical        | List of 10 comments on the video                      |
| Subscriber Count    | Numerical          | Number of subscribers to the channel                  |
| Category ID         | Categorical        | YouTube category ID for the video                     |
| Definition          | Categorical        | Quality definition of the video                       |
| Duration            | Categorical        | Duration of the video in a human-readable format      |
| Track Name          | Categorical        | Name of the track                                     |
| Artist Name         | Categorical        | Name of the artist                                    |
| Artist              | Categorical        | Name of the artist                                    |
| singer_followers    | Numerical          | Number of followers the singer has on Spotify         |
| singer_popularity   | Numerical          | Popularity rating of the singer                       |
| Album Name          | Categorical        | Name of the album                                     |
| Popularity          | Numerical          | Popularity rating of the track                        |
| Duration (ms)       | Numerical          | Duration of the track in milliseconds                 |
| Track ID            | Categorical        | Unique identifier for the track                       |
| Spotify URL         | Categorical        | URL to the track on Spotify                           |
| Mean Sentiment Score| Numerical          | Average sentiment score of comments                   |
| Processed_Comments  | Categorical        | Processed list of comments                            |
| Duration_seconds    | Numerical          | Duration of the video in seconds                      |
| genre_label         | Categorical        | Categorical label for the genre                       |


## Summary and Interpretation of Results
The preprocessing steps significantly cleaned and transformed the raw data, making it suitable for accurate and insightful analysis. The sentiment scores provide a quantitative measure of public perception, which, combined with other song metrics, can be used to gauge popularity and engagement.